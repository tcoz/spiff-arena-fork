from datetime import tzinfo
from typing import Any, Optional

class LocalTimezone(tzinfo):
    STDOFFSET: Any = ...
    DSTOFFSET: Any = ...
    DSTDIFF: Any = ...
    def __init__(self) -> None: ...
    def utcoffset(self, dt: Any): ...
    def dst(self, dt: Any): ...
    def tzname(self, dt: Any): ...
    def fromutc(self, dt: Any): ...

class _Zone:
    def tz_or_local(self, tzinfo: Optional[Any] = ...): ...
    def to_local(self, dt: Any, local: Optional[Any] = ..., orig: Optional[Any] = ...): ...
    def to_system(self, dt: Any): ...
    def to_local_fallback(self, dt: Any): ...
    def get_timezone(self, zone: Any): ...
    def local(self): ...
    def utc(self): ...

timezone: Any

def maybe_timedelta(delta: Any): ...
def delta_resolution(dt: Any, delta: Any): ...
def remaining(start: Any, ends_in: Any, now: Optional[Any] = ..., relative: bool = ...): ...
def rate(r: Any): ...
def weekday(name: Any): ...
def humanize_seconds(secs: Any, prefix: str = ..., sep: str = ..., now: str = ..., microseconds: bool = ...): ...
def maybe_iso8601(dt: Any): ...
def is_naive(dt: Any): ...
def make_aware(dt: Any, tz: Any): ...
def localize(dt: Any, tz: Any): ...
def to_utc(dt: Any): ...
def maybe_make_aware(dt: Any, tz: Optional[Any] = ...): ...

class ffwd:
    year: Any = ...
    month: Any = ...
    weeks: Any = ...
    weekday: Any = ...
    day: Any = ...
    hour: Any = ...
    minute: Any = ...
    second: Any = ...
    microsecond: Any = ...
    days: Any = ...
    def __init__(self, year: Optional[Any] = ..., month: Optional[Any] = ..., weeks: int = ..., weekday: Optional[Any] = ..., day: Optional[Any] = ..., hour: Optional[Any] = ..., minute: Optional[Any] = ..., second: Optional[Any] = ..., microsecond: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def __radd__(self, other: Any): ...

def utcoffset(time: Any = ..., localtime: Any = ...): ...
def adjust_timestamp(ts: Any, offset: Any, here: Any = ...): ...
def get_exponential_backoff_interval(factor: Any, retries: Any, maximum: Any, full_jitter: bool = ...): ...
