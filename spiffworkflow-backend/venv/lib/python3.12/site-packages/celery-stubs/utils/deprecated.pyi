from typing import Any, Optional

def warn(description: Optional[Any] = ..., deprecation: Optional[Any] = ..., removal: Optional[Any] = ..., alternative: Optional[Any] = ..., stacklevel: int = ...) -> None: ...
def Callable(deprecation: Optional[Any] = ..., removal: Optional[Any] = ..., alternative: Optional[Any] = ..., description: Optional[Any] = ...): ...
def Property(deprecation: Optional[Any] = ..., removal: Optional[Any] = ..., alternative: Optional[Any] = ..., description: Optional[Any] = ...): ...

class _deprecated_property:
    depreinfo: Any = ...
    def __init__(self, fget: Optional[Any] = ..., fset: Optional[Any] = ..., fdel: Optional[Any] = ..., doc: Optional[Any] = ..., **depreinfo: Any) -> None: ...
    def __get__(self, obj: Any, type: Optional[Any] = ...): ...
    def __set__(self, obj: Any, value: Any): ...
    def __delete__(self, obj: Any): ...
    def setter(self, fset: Any): ...
    def deleter(self, fdel: Any): ...
