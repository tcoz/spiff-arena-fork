from celery.bin.base import Command as Command
from celery.five import items as items, string_t as string_t
from celery.platforms import EX_UNAVAILABLE as EX_UNAVAILABLE, EX_USAGE as EX_USAGE
from celery.utils import text as text
from typing import Any, Optional

class _RemoteControl(Command):
    name: Any = ...
    leaf: bool = ...
    control_group: Any = ...
    show_body: Any = ...
    show_reply: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def add_arguments(self, parser: Any) -> None: ...
    @classmethod
    def get_command_info(cls, command: Any, indent: int = ..., prefix: str = ..., color: Optional[Any] = ..., help: bool = ..., app: Optional[Any] = ..., choices: Optional[Any] = ...): ...
    @classmethod
    def list_commands(cls, indent: int = ..., prefix: str = ..., color: Optional[Any] = ..., help: bool = ..., app: Optional[Any] = ...): ...
    def usage(self, command: Any): ...
    def call(self, *args: Any, **kwargs: Any) -> None: ...
    def run(self, *args: Any, **kwargs: Any): ...
    def do_call_method(self, args: Any, timeout: Optional[Any] = ..., destination: Optional[Any] = ..., json: bool = ..., **kwargs: Any): ...
    def compile_arguments(self, meta: Any, method: Any, args: Any): ...
    def choices(self): ...
    @property
    def epilog(self): ...

class inspect(_RemoteControl):
    name: str = ...
    control_group: str = ...
    def call(self, method: Any, arguments: Any, **options: Any): ...

class control(_RemoteControl):
    name: str = ...
    control_group: str = ...
    def call(self, method: Any, arguments: Any, **options: Any): ...

class status(Command):
    option_list: Any = ...
    def run(self, *args: Any, **kwargs: Any) -> None: ...
