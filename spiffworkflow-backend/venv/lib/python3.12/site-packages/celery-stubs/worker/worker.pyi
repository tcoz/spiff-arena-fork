from celery import bootsteps
from typing import Any, Optional

class WorkController:
    app: Any = ...
    pidlock: Any = ...
    blueprint: Any = ...
    pool: Any = ...
    semaphore: Any = ...
    exitcode: Any = ...
    class Blueprint(bootsteps.Blueprint):
        name: str = ...
        default_steps: Any = ...
    hostname: Any = ...
    def __init__(self, app: Optional[Any] = ..., hostname: Optional[Any] = ..., **kwargs: Any) -> None: ...
    pidfile: Any = ...
    concurrency: Any = ...
    loglevel: Any = ...
    ready_callback: Any = ...
    use_eventloop: Any = ...
    options: Any = ...
    pool_cls: Any = ...
    steps: Any = ...
    def setup_instance(self, queues: Optional[Any] = ..., ready_callback: Optional[Any] = ..., pidfile: Optional[Any] = ..., include: Optional[Any] = ..., use_eventloop: Optional[Any] = ..., exclude_queues: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def on_init_blueprint(self) -> None: ...
    def on_before_init(self, **kwargs: Any) -> None: ...
    def on_after_init(self, **kwargs: Any) -> None: ...
    def on_start(self) -> None: ...
    def on_consumer_ready(self, consumer: Any) -> None: ...
    def on_close(self) -> None: ...
    def on_stopped(self) -> None: ...
    def setup_queues(self, include: Any, exclude: Optional[Any] = ...) -> None: ...
    include: Any = ...
    def setup_includes(self, includes: Any) -> None: ...
    def prepare_args(self, **kwargs: Any): ...
    def start(self) -> None: ...
    def register_with_event_loop(self, hub: Any) -> None: ...
    def signal_consumer_close(self) -> None: ...
    def should_use_eventloop(self): ...
    def stop(self, in_sighandler: bool = ..., exitcode: Optional[Any] = ...) -> None: ...
    def terminate(self, in_sighandler: bool = ...) -> None: ...
    def reload(self, modules: Optional[Any] = ..., reload: bool = ..., reloader: Optional[Any] = ...) -> None: ...
    def info(self): ...
    def rusage(self): ...
    def stats(self): ...
    @property
    def state(self): ...
    logfile: Any = ...
    task_events: Any = ...
    consumer_cls: Any = ...
    timer_cls: Any = ...
    timer_precision: Any = ...
    optimization: Any = ...
    autoscaler_cls: Any = ...
    pool_putlocks: Any = ...
    pool_restarts: Any = ...
    statedb: Any = ...
    schedule_filename: Any = ...
    scheduler: Any = ...
    time_limit: Any = ...
    soft_time_limit: Any = ...
    max_tasks_per_child: Any = ...
    max_memory_per_child: Any = ...
    prefetch_multiplier: Any = ...
    disable_rate_limits: Any = ...
    worker_lost_wait: Any = ...
    def setup_defaults(self, concurrency: Optional[Any] = ..., loglevel: str = ..., logfile: Optional[Any] = ..., task_events: Optional[Any] = ..., pool: Optional[Any] = ..., consumer_cls: Optional[Any] = ..., timer_cls: Optional[Any] = ..., timer_precision: Optional[Any] = ..., autoscaler_cls: Optional[Any] = ..., pool_putlocks: Optional[Any] = ..., pool_restarts: Optional[Any] = ..., optimization: Optional[Any] = ..., O: Optional[Any] = ..., statedb: Optional[Any] = ..., time_limit: Optional[Any] = ..., soft_time_limit: Optional[Any] = ..., scheduler: Optional[Any] = ..., pool_cls: Optional[Any] = ..., state_db: Optional[Any] = ..., task_time_limit: Optional[Any] = ..., task_soft_time_limit: Optional[Any] = ..., scheduler_cls: Optional[Any] = ..., schedule_filename: Optional[Any] = ..., max_tasks_per_child: Optional[Any] = ..., prefetch_multiplier: Optional[Any] = ..., disable_rate_limits: Optional[Any] = ..., worker_lost_wait: Optional[Any] = ..., max_memory_per_child: Optional[Any] = ..., **_kw: Any) -> None: ...
