from celery.utils.log import ColorFormatter
from typing import Any, Optional

class TaskFormatter(ColorFormatter):
    def format(self, record: Any): ...

class Logging:
    app: Any = ...
    loglevel: Any = ...
    format: Any = ...
    task_format: Any = ...
    colorize: Any = ...
    def __init__(self, app: Any) -> None: ...
    def setup(self, loglevel: Optional[Any] = ..., logfile: Optional[Any] = ..., redirect_stdouts: bool = ..., redirect_level: str = ..., colorize: Optional[Any] = ..., hostname: Optional[Any] = ...): ...
    def redirect_stdouts(self, loglevel: Optional[Any] = ..., name: str = ...) -> None: ...
    def setup_logging_subsystem(self, loglevel: Optional[Any] = ..., logfile: Optional[Any] = ..., format: Optional[Any] = ..., colorize: Optional[Any] = ..., hostname: Optional[Any] = ..., **kwargs: Any): ...
    def setup_task_loggers(self, loglevel: Optional[Any] = ..., logfile: Optional[Any] = ..., format: Optional[Any] = ..., colorize: Optional[Any] = ..., propagate: bool = ..., **kwargs: Any): ...
    def redirect_stdouts_to_logger(self, logger: Any, loglevel: Optional[Any] = ..., stdout: bool = ..., stderr: bool = ...): ...
    def supports_color(self, colorize: Optional[Any] = ..., logfile: Optional[Any] = ...): ...
    def colored(self, logfile: Optional[Any] = ..., enabled: Optional[Any] = ...): ...
    def setup_handlers(self, logger: Any, logfile: Any, format: Any, colorize: Any, formatter: Any = ..., **kwargs: Any): ...
    def setup_logger(self, name: str = ..., *args: Any, **kwargs: Any): ...
    def get_default_logger(self, name: str = ..., **kwargs: Any): ...
    @already_setup.setter
    def already_setup(self, was_setup: Any) -> None: ...
